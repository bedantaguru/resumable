% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_alternatives.R
\name{alternatives}
\alias{alternatives}
\title{Alternatives framework}
\usage{
alternatives(method_name, implement, use, install, register, scope)
}
\arguments{
\item{method_name}{The function (either the direct function or name of the
function) which has multiple back-ends or implementation (which you want to
alter or install)}

\item{implement}{This is the combination of `install` and `use`.}

\item{use}{Use one of the _alternatives_ which is already installed (name of
the intended _alternative_)}

\item{install}{Install dependency to an _alternative_ (mainly R-packages, but
potentially we can expand the API for other type of installation too). But
it will not use it.}

\item{register}{Mainly kept for registration of new _alternative_ to the same
function.}

\item{scope}{Scope where the changes of _alternatives_ will take place.}
}
\value{
If *no argument expect* `method_name` is supplied then details about
  _alternatives_ for the function will be returned. Otherwise it does not
  return anything useful.
}
\description{
For some functions (or functionalities) there can be multiple
  number of R packages or even within a package multiple ways to do same or
  similar things. Alternatives framework tries to unify the vareity
  introduced by different approaches (may be referred as _alternatives_ for
  that function) adopted by several authors / packages. It is like
  `update-alternatives` command in linux (maybe you have used it to switch
  between Java versions). But here it is more focused towards similar work
  being done by various packages / functions. There are few related concepts
  to it. Like adapters and converters. However, these all are now in
  conceptual stage.
}
