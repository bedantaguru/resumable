% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/object_storr.R
\name{resumable}
\alias{resumable}
\title{Create a resumable function}
\usage{
resumable(.f, path, enable_functions_footprinting = F, trace_only = F,
  clean_on_start = F, skip_if, details = F, ...)
}
\arguments{
\item{.f}{a function or a formula similar to what is used in purrr package}

\item{path}{a local path where and object_storr will be created for storing the function outcomes}

\item{enable_functions_footprinting}{Logical value. If set to \code{TRUE} the resumable function will be liked to source code of the input function. Default value in \code{FALSE}.}

\item{trace_only}{Logical value. If set to \code{TRUE} the resumable function does not store any output (just NULL or 0). It may be useful for situation where only extrenal activity is performed. Default value in \code{FALSE}.}

\item{clean_on_start}{Logical value. If set to \code{TRUE} then the cached values will be cleaned on start. Default value in \code{FALSE}.}

\item{skip_if}{a function or a formula similar to what is used in purrr package which should return a locgical scaler. If this returns \code{TRUE} the value will not be stored. Ignore if not required.}

\item{details}{Logical value indicating whether the object_storr and resumable function both are required or not. Default value in \code{FALSE}.}

\item{...}{other params to be passed to \code{.f} (at present this is not working properly. Directly use purrr type formula.)}
}
\value{
If \code{details} is \code{TRUE} it returns a list with resumable function and corresponding object_storr. Otherwise it will return only resumable function.
}
\description{
Create a resumable function
}
\details{
This function is fully compatible in parallel processing. This is similar to \link[storr]{storr_external}. However, this is applicable to arbitrary user defined functions. Note here numeric and integer will be treated as different entity as input. (Means f(10) and f(10L) (f is a resumable function) both will evalute first even though the input function is indifferent.)
}
\examples{
slow <- function(x){
  print("calc")
  x^2
}

slowr <- resumable(slow, "test")

# first time the values will be caluculated and stored
purrr::map(seq(10), slowr)

# this time the cached values are coming
purrr::map(seq(10), slowr)


}
\seealso{
\link[storr]{storr_external}
}
